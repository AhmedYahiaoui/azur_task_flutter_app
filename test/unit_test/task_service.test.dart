import 'dart:convert';
import 'package:azur_tech_task_app/controllers/services/task_service.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:azur_tech_task_app/models/task.dart';
import 'package:http/http.dart' as http;

import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';

import 'task_service.test.mocks.dart'; // Auto-generated by Mockito

@GenerateMocks([http.Client])
void main() {
  late TaskService taskService;
  late MyMockClient mockClient;

  setUp(() {
    mockClient = MyMockClient();
    taskService = TaskService();
  });

  group('TaskService', () {
    test('fetchTasksFromServer returns a list of tasks on success', () async {
      final mockResponse = jsonEncode([
        {"id": 1, "title": "Task 1", "description": "Description 1"},
        {"id": 2, "title": "Task 2", "description": "Description 2"}
      ]);

      // Mock the GET request
      when(mockClient.get(
        Uri.parse(taskService.baseUrl),
        headers: anyNamed('headers'),
      )).thenAnswer((_) async => http.Response(mockResponse, 200));

      final tasks = await taskService.fetchTasksFromServer();

      expect(tasks.length, 2);
      expect(tasks[0].title, "Task 1");
    });

    test('sendTasksToServer sends tasks successfully', () async {
      final tasks = [
        Task(
          id: "1",
          userId: 'user_id',
          title: '_title',
          description: '_description',
          createdDate: DateTime.now(),
          startTime: DateTime.now(),
          endTime: DateTime.now(),
          isFavorit: false,
          isNotify: true,
          hash: 123,
        )
      ];

      // Mock the POST request
      when(mockClient.post(
        Uri.parse(taskService.baseUrl),
        body: jsonEncode(tasks.map((task) => task.toJson()).toList()),
        headers: anyNamed('headers'),
      )).thenAnswer((_) async => http.Response('', 200));

      final result = await taskService.sendTasksToServer(tasks);
      expect(result, true);
    });

    test('fetchTasksFromServer returns empty list on failure', () async {
      // Mock a failed GET request
      when(mockClient.get(
        Uri.parse(taskService.baseUrl),
        headers: anyNamed('headers'),
      )).thenAnswer((_) async => http.Response('Error', 500));

      final tasks = await taskService.fetchTasksFromServer();
      expect(tasks.isEmpty, true);
    });
  });
}
